
service: kela-chatbot-serverless
# app and org for use with dashboard.serverless.com
app: kela-chatbot-serverless
org: samulirukkila

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1

plugins:
  - serverless-ignore
  - serverless-plugin-typescript
# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      - cloudwatch:*

functions:

  # Get user's Kela information
  KelaUserInformation:
    handler: lambdas/userInformation/userInformation.handler
    name: kela-userInformation
    description: Gets user information from DynamoDB via provided PIN
    
  # Book a new time for Kela meeting
  KelaBookAppointment:
    handler: lambdas/bookAppointment/bookAppointment.handler
    name: kela-bookAppointment
    description: Books an appointment for the user 

  # Locate nearest Kela -apartment
  KelaLocateNearestBuilding:
    handler: lambdas/locateNearestBuilding/locateNearestBuilding.handler
    name: kela-locateNearestBuilding


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    # DynamoDB table for Customer-data
    KelaCustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: kela-Customers
        AttributeDefinitions:
          - AttributeName: Pin
            AttributeType: S
        KeySchema:
          - AttributeName: Pin
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # DynamoDB table for booked appointments
    KelaAppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: kela-Appointments
        AttributeDefinitions:
          - AttributeName: StartDateTime
            AttributeType: S
          - AttributeName: EndDateTime
            AttributeType: S
        KeySchema:
          - AttributeName: StartDateTime
            KeyType: HASH
          - AttributeName: EndDateTime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
